{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///Users/kongphopmengkuang/snakejs/app/snake.tsx"],"sourcesContent":["\"use client\";\nimport React, { useRef, useEffect} from 'react';\nimport p5 from 'p5';\nimport dynamic from 'next/dynamic';\n\n\n\nconst SnakeGame: React.FC = () => {\n    const canvasRef = useRef<HTMLDivElement>(null);\n    \n    useEffect(() => {\n        \n        if (typeof window !== \"undefined\" && canvasRef.current) {\n      let blocksX = 40, blocksY = 20;\n      let maxBlocks = 1000, blockSize: number, xOffset = 0, yOffset = 0, s: any, pause = false, speedMultiplier = 1, hc: any, outlineLength = 3, setup_i = 0;\n    \n      const sketch = (p: p5) => {\n          p.setup = () => {\n              setup_i++;\n              let a = canvasRef.current;\n              if (!a) return; // Ensure canvasRef.current is defined\n              blockSize = Math.min(a.offsetWidth / blocksX, a.offsetHeight / blocksY);\n              p.createCanvas(a.offsetWidth - blockSize, a.offsetHeight - blockSize).parent(a);\n              p.pixelDensity(15);\n              setBlocks();\n              blockSize = Math.min(p.width / blocksX, p.height / blocksY);\n              outlineLength = blockSize / 15;\n              yOffset = xOffset = 0;\n              if (setup_i == 1) p.setup();\n              s = new Snake(p);\n              hc = new HamiltonianCycle(blocksX, blocksY, p);\n              s.resetOnHamiltonian(hc.cycle);\n              p.frameRate(30);\n            \n              let isSpeedUp = false;\n              const toggleSpeed = () => {\n                  isSpeedUp = !isSpeedUp;\n                  speedMultiplier = isSpeedUp ? 10 : 1;\n              }\n              \n              if (a) {\n                a.addEventListener('mouseover', toggleSpeed);\n                a.addEventListener('mouseout', toggleSpeed);\n                a.addEventListener('touchstart', toggleSpeed);\n              }\n              \n              window.addEventListener(\"resize\", resize);\n          };\n    \n          const setBlocks = () => {\n              let a = 1;\n              for (; ;) {\n                  if (Math.floor(p.width / a) * Math.floor(p.height / a) < maxBlocks) {\n                      blockSize = a;\n                      blocksX = Math.floor(p.width / blockSize) - Math.floor(p.width / blockSize) % 2 - 2;\n                      blocksY = Math.floor(p.height / blockSize) - Math.floor(p.height / blockSize) % 2;\n                      break;\n                  } else a++;\n              }\n          };\n          const resize = () => {\n              blockSize = Math.min(p.width / blocksX, p.height / blocksY);\n              outlineLength = blockSize / 15;\n              xOffset = (p.width - blockSize * blocksX) / 2;\n              yOffset = (p.height - blockSize * blocksY) / 2;\n              p.setup();\n          }\n          let resizeDelay: any;\n          const windowResized = () => {\n              clearTimeout(resizeDelay);\n              resizeDelay = setTimeout(resize, 500)\n          }\n           p.windowResized = windowResized\n          p.draw = () => {\n              if (!pause) {\n                p.background(\"#202222\");\n                p.stroke(\"#202222\");\n                p.strokeWeight(1);\n                p.fill(20);\n                p.rect(0, 0, p.width, yOffset);\n                p.rect(0, 0, xOffset, p.height);\n                p.rect(p.width, p.height, -p.width, -yOffset);\n                p.rect(p.width, p.height, -xOffset, -p.height);\n                p.push();\n                p.translate(xOffset, yOffset);\n                p.fill(0);\n                s.show();\n                for (let a = 0; a < speedMultiplier; a++) s.update();\n                p.pop();\n              }\n          };\n\n         class Snake {\n              x: number;\n              y: number;\n              tailBlocks: p5.Vector[];\n              velX: number;\n              velY: number;\n              apple: Apple;\n              addCount: number;\n              survivalMode: boolean;\n              dead: boolean;\n              path: any;\n              weWin: boolean;\n              lateGame: boolean;\n              noMoreAStar: boolean;\n              searchForLongestPathModeActive: boolean;\n              controlledByPlayer: boolean;\n              cycle: any;\n              headCyclePosition: number;\n              tailCyclePosition: number;\n              appleCyclePosition: any;\n              constructor(p: p5) {\n                this.x = Math.floor(blocksX / 2);\n                this.y = Math.floor(blocksY / 2);\n                this.tailBlocks = [];\n                this.tailBlocks.push(p.createVector(this.x - 3, this.y));\n                this.tailBlocks.push(p.createVector(this.x - 2, this.y));\n                this.tailBlocks.push(p.createVector(this.x - 1, this.y));\n                this.velX = 1;\n                this.velY = 0;\n                this.apple = new Apple(this,p);\n                this.addCount = 0;\n                this.survivalMode = this.dead = false;\n                this.path = null;\n                this.weWin = this.lateGame = this.noMoreAStar = this.searchForLongestPathModeActive = this.controlledByPlayer = false;\n                this.cycle = null;\n                this.headCyclePosition = 0;\n                this.tailCyclePosition = 0;\n              }\n              resetOnHamiltonian(a: any) {\n                this.cycle = a;\n                this.tailBlocks = [];\n                this.tailBlocks.push(p.createVector(a[0].x, a[0].y));\n                this.tailBlocks.push(p.createVector(a[1].x, a[1].y));\n                this.tailBlocks.push(p.createVector(a[2].x, a[2].y));\n                this.x = a[3].x;\n                this.y = a[3].y;\n                this.apple = new Apple(this,p);\n                this.headCyclePosition = 3;\n                this.tailCyclePosition = 0;\n              }\n                show() {\n                    p.noStroke();\n                    p.fill(\"#e8e8e6\");\n                    p.ellipse(this.x * blockSize + blockSize / 2, this.y * blockSize + blockSize / 2, blockSize - outlineLength * 2, blockSize - outlineLength * 2);\n                    p.rect((this.x + this.tailBlocks[this.tailBlocks.length - 1].x) * blockSize / 2 + outlineLength, (this.y + this.tailBlocks[this.tailBlocks.length - 1].y) * blockSize / 2 + outlineLength, blockSize - outlineLength * 2, blockSize - outlineLength * 2);\n                    for (var a = 0; a < this.tailBlocks.length; a++)\n                        p.ellipse(this.tailBlocks[a].x * blockSize + blockSize / 2, this.tailBlocks[a].y * blockSize + blockSize / 2, blockSize - outlineLength * 2, blockSize - outlineLength * 2),\n                            a < this.tailBlocks.length - 1 && p.rect((this.tailBlocks[a].x + this.tailBlocks[a + 1].x) / 2 * blockSize + outlineLength, (this.tailBlocks[a].y + this.tailBlocks[a + 1].y) / 2 * blockSize + outlineLength, blockSize - outlineLength * 2, blockSize - outlineLength * 2);\n                    this.weWin || this.apple.show();\n                }\n                move() {\n                    if (!this.weWin) {\n                        if (!this.controlledByPlayer)\n                            if ((!this.path || this.path.pathCounter >= this.path.pathLength) && this.calculatePath(), this.path && this.path.pathLength !== 0) {\n                                var a = this.path.getNextMove();\n                                this.velX = a.x;\n                                this.velY = a.y;\n                            } else {\n                                var a = this.getNextPosition();\n                                this.velX = a.x - this.x;\n                                this.velY = a.y - this.y;\n                            }\n                        this.addCount <= 0 ? (this.tailBlocks.splice(0, 1), this.tailCyclePosition = (this.tailCyclePosition + 1) % this.cycle.length) : this.addCount--;\n                        this.tailBlocks.push(p.createVector(this.x, this.y));\n                        this.x += this.velX;\n                        this.y += this.velY;\n                    }\n                }\n                getNextPosition() {\n                    this.appleCyclePosition = hc.getNodeNo(this.apple.x, this.apple.y);\n                    let a = hc.getPossiblePositionsFrom(this.x, this.y),\n                        b = 100000,\n                        c = 0;\n                    for (let d = 0; d < a.length; d++) {\n                        let e = this.appleCyclePosition - a[d];\n                        for (; e < 0;) e += this.cycle.length;\n                        !this.overTakesTail(this.cycle[a[d]]) && e < b && (b = e, c = d);\n                    }\n                    return b === 100000 ? this.cycle[(hc.getNodeNo(this.x, this.y) + 1) % this.cycle.length] : this.cycle[a[c]];\n                }\n              overTakesTail(a: any, b?: any, c?: any) {\n                  b = b ? b.cycleNo : hc.getNodeNo(this.x, this.y);\n                  c = c ? hc.getNodeNo(c.x, c.y) : hc.getNodeNo(this.tailBlocks[0].x, this.tailBlocks[0].y);\n                  if (this.getDistanceBetweenPoints(b, c) <= 50 + this.addCount) return true;\n                  c = c - 50 - this.addCount;\n                  c < 0 && (c += this.cycle.length);\n                  return this.getDistanceBetweenPoints(b, a.cycleNo) >= this.getDistanceBetweenPoints(b, c) ? true : false;\n              }\n                getPathBasedOnAStar() {\n                  for (var a of this.cycle) a.resetForAStar();\n                    this.appleCyclePosition = hc.getNodeNo(this.apple.x, this.apple.y);\n                  var b = this.cycle[hc.getNodeNo(this.x, this.y)];\n                    a = [];\n                    let c: any;\n                    b = new HPath(b, this.cycle[this.appleCyclePosition],p);\n                    for (a.push(b);;) {\n                        if (a.length === 0) return c;\n                      b = a.shift();\n                        if (c && b.pathLength >= c.pathLength) continue;\n                        if (b.distanceToApple === 0) {\n                            if (c == null || b.pathLength < c.pathLength) c = b.clone();\n                            continue;\n                        }\n                        let e = b.getLastNode();\n                        if (!e.alreadyVisited || b.pathLength < e.shortestDistanceToThisPoint) {\n                            e.alreadyVisited = true;\n                            e.shortestDistanceToThisPoint = b.pathLength;\n                            for (var d of e.edges) {\n                              if (this.overTakesTail(d, e, b.getSnakeTailPositionAfterFollowingPath(this)) && d.cycleNo !== e.cycleNo + 1) continue;\n                                let f = b.clone();\n                                f.addToTail(d);\n                                f.getLastNode().alreadyVisited && f.pathLength > f.getLastNode().shortestDistanceToThisPoint || a.push(f);\n                            }\n                        }\n                        a.sort((f: HPath, n: HPath) => f.distanceToApple + f.pathLength - (n.distanceToApple + n.pathLength));\n                    }\n                }\n                getDistanceBetweenPoints(a: any, b: any) {\n                  for (a = b - a; a < 0;) a += this.cycle.length;\n                  return a;\n              }\n              checkFuturePos() {\n                  this.x += this.velX;\n                  this.y += this.velY;\n                  for (var a = 0; a < this.tailBlocks.length; a++) this.tailBlocks[a].x === this.x && this.tailBlocks[a].y === this.y && (this.dead = true);\n                  if (this.x < 0 || this.x >= blocksX || this.y < 0 || this.y >= blocksY) this.dead = true;\n                  this.x -= this.velX;\n                  this.y -= this.velY;\n                  this.dead && (this.dead = false, pause = true);\n              }\n                update() {\n                    this.dead || (this.move(), this.checkCollisions());\n                }\n                checkCollisions() {\n                    if (blocksX * blocksY - (this.tailBlocks.length + 1) <= 0) this.weWin = true, p.setup();\n                    else {\n                        for (var a = 0; a < this.tailBlocks.length; a++) if (this.tailBlocks[a].x === this.x && this.tailBlocks[a].y === this.y) {\n                            this.dead = true;\n                            return;\n                        }\n                        this.x < 0 || this.x >= blocksX || this.y < 0 || this.y >= blocksY ? this.dead = true : this.x === this.apple.x && this.y === this.apple.y && this.ateApple();\n                    }\n                }\n                ateApple() {\n                    this.addCount += 4;\n                    this.apple = new Apple(this,p);\n                    this.calculatePath();\n                }\n                calculatePath() {\n                    this.path = this.getPathBasedOnAStar();\n                }\n                isAppleOnSnake(a: any) {\n                    return this.snakeAtPosition(a.x, a.y);\n                }\n                snakeAtPosition(a: any, b: any) {\n                    return this.snakeTailAtPosition(a, b) || this.x == a && this.y == b;\n                }\n                snakeTailAtPosition(a: any, b: any) {\n                  for (var c = 0; c < this.tailBlocks.length; c++) if (this.tailBlocks[c].x == a && this.tailBlocks[c].y == b) return true;\n                    return false;\n                }\n            }\n          class Apple {\n              x: number;\n              y: number;\n              constructor(a: Snake,p: p5) {\n                  this.x = Math.floor(p.random(blocksX));\n                  for (this.y = Math.floor(p.random(blocksY)); a.isAppleOnSnake(this);) this.x = Math.floor(p.random(blocksX)), this.y = Math.floor(p.random(blocksY));\n                \n              }\n            show() {\n                p.noStroke();\n                p.fill(\"#21b8cd\");\n                p.push();\n                p.translate(this.x * blockSize + outlineLength, this.y * blockSize + outlineLength);\n                p.ellipse(blockSize / 2, blockSize / 2, blockSize - 2 * outlineLength, blockSize - 2 * outlineLength);\n                p.pop();\n            }\n                isAtPosition(a: any, b: any) {\n                  return this.x === a && this.y === b;\n              }\n          }\n\n          class HamiltonianCycle {\n              w: number;\n              h: number;\n              cycle: any[];\n              spanningTreeNodes: HNode[];\n              constructor(a: number, b: number,p: p5) {\n                  this.w = a;\n                  this.h = b;\n                this.cycle = [];\n                  this.spanningTreeNodes = [];\n                this.createCycle(p);\n              }\n              createCycle(p: p5) {\n                this.createSpanningTree(p);\n                  var a:any[] = [];\n                  let b:HNode[] = [];\n                  for (let i = 0; i < this.w; i++)\n                      for (var c = 0; c < this.h; c++) b.push(new HNode(i, c));\n                  for (var d of b) d.setEdges(b);\n                  for (let i = 0; i < this.spanningTreeNodes.length; i++) {\n                      let d = this.spanningTreeNodes[i];\n                      for (let e of d.spanningTreeAdjacentNodes) {\n                          let c = (p: any, t: any, q: any, u: any) => {\n                              t + this.h * p >= b.length || u + this.h * q >= b.length || (p = b[t + this.h * p], q = b[u + this.h * q], p.spanningTreeAdjacentNodes.push(q), q.spanningTreeAdjacentNodes.push(p))\n                          };\n                          let k = d.getDirectionTo(e),\n                              l = d.x * 2,\n                              m = d.y * 2;\n                          k.x === 1 ? (c(l + 1, m, l + 2, m), c(l + 1, m + 1, l + 2, m + 1)) :\n                              k.y === 1 && (c(l, m + 1, l, m + 2), c(l + 1, m + 1, l + 1, m + 2));\n                      }\n                  }\n                  a = b.filter(k => k.spanningTreeAdjacentNodes.length === 1);\n                    let e: HEdge[] = [];\n                    for (let f of a) {\n                        let dir = f.spanningTreeAdjacentNodes[0].getDirectionTo(f);\n                        dir.x += f.x;\n                        dir.y += f.y;\n                        let edge = new HEdge(b[dir.y + this.h * dir.x], f);\n                        let d = true;\n                        for (let n of e) if (n.isEqualTo(edge)) {\n                            d = false;\n                            break;\n                        }\n                        d && e.push(edge);\n                    }\n                  for (let k of e) k.connectNodes();\n                  a = b.filter(k => k.spanningTreeAdjacentNodes.length === 1);\n                    e = [];\n                    for (let g of a)\n                        for (let h of a)\n                            if (p.dist(g.x, g.y, h.x, h.y) === 1 && Math.floor(g.x / 2) === Math.floor(h.x / 2) && Math.floor(g.y / 2) === Math.floor(h.y / 2)) {\n                                let f = new HEdge(h, g);\n                                let n = true;\n                                for (let r of e) if (r.isEqualTo(f)) {\n                                    n = false;\n                                    break;\n                                }\n                                n && e.push(f);\n                                break;\n                            }\n                  for (let k of e) k.connectNodes();\n                let randomElement = b[Math.floor(p.random(b.length))];\n                a = [randomElement];\n                  let g = a[0];\n                  for (let h = a[0].spanningTreeAdjacentNodes[0]; h !== a[0];) {\n                      let r = h.spanningTreeAdjacentNodes[0];\n                      r === g && (r = h.spanningTreeAdjacentNodes[1]);\n                      a.push(h);\n                      g = h;\n                      h = r;\n                  }\n                  this.cycle = a;\n                for (g = 0; g < this.cycle.length; g++) this.cycle[g].cycleNo = g;\n              }\n              show(p: p5) {\n                  for (let a = 0; a < this.cycle.length; a++)\n                      p.push(),\n                          p.translate(blockSize / 2, blockSize / 2),\n                          p.scale(blockSize),\n                          p.fill(255),\n                          p.textAlign(p.CENTER, p.CENTER),\n                          p.textSize(.3),\n                          p.text(a, this.cycle[a].x, this.cycle[a].y),\n                          p.stroke(255, 100),\n                          p.strokeWeight(.1),\n                          a !== this.cycle.length - 1 ? p.line(this.cycle[a].x, this.cycle[a].y, this.cycle[a + 1].x, this.cycle[a + 1].y) :\n                              p.line(this.cycle[a].x, this.cycle[a].y, this.cycle[0].x, this.cycle[0].y),\n                          p.pop();\n              }\n              createSpanningTree(p: p5) {\n                  let a: HNode[] = [];\n                  for (var b = 0; b < this.w / 2; b++) for (let i = 0; i < this.h / 2; i++) a.push(new HNode(b, i));\n                  for (var d of a) d.setEdges(a);\n                  let edges: HEdge[] = [];\n                  let c = a[Math.floor(p.random(a.length))];\n                  edges.push(new HEdge(c, c.edges[0]));\n                  let e = [c, c.edges[0]];\n                  for (; e.length < a.length;) {\n                      c = (e as any).getRandomElement(p);\n                      const filteredEdges = c.edges.filter((f: HNode) => !e.includes(f));\n                      if (filteredEdges.length !== 0) {\n                          d = (filteredEdges as any).getRandomElement(p);\n                          e.push(d);\n                          edges.push(new HEdge(c, d));\n                      }\n                  }\n                  for (let f of a) f.setSpanningTreeEdges(edges);\n                  this.spanningTreeNodes = a;\n              }\n              getNextPosition(a: any, b: any) {\n                  for (let c = 0; c < this.cycle.length; c++) if (this.cycle[c].x === a && this.cycle[c].y === b) return this.cycle[(c + 1) % this.cycle.length];\n                  return null;\n              }\n              getNodeNo(a: any, b: any) {\n                  for (let c = 0; c < this.cycle.length; c++) if (this.cycle[c].x === a && this.cycle[c].y === b) return c;\n                  return -1;\n              }\n              getPossiblePositionsFrom(a: any, b: any) {\n                  a = this.cycle[this.getNodeNo(a, b)];\n                  let positions: number[] = [];\n                  for (let c of a.edges) positions.push(this.getNodeNo(c.x, c.y));\n                  return positions;\n              }\n          }\n           \n          (Array.prototype as any).getRandomElement = function (p: p5): any {\n            return this[Math.floor(p.random(this.length))];\n          };\n\n          class HNode {\n              x: number;\n              y: number;\n              spanningTreeAdjacentNodes: HNode[];\n              cycleNo: number;\n              alreadyVisited: boolean;\n              shortestDistanceToThisPoint: number;\n              edges: HNode[];\n            constructor(a: number, b: number) {\n                  this.x = a;\n                  this.y = b;\n                  this.spanningTreeAdjacentNodes = [];\n                  this.cycleNo = -1;\n                  this.alreadyVisited = false;\n                  this.shortestDistanceToThisPoint = 0;\n                this.edges = [];\n              }\n              setEdges(a: HNode[]) {\n                this.edges = a.filter(b => p.dist(b.x, b.y, this.x, this.y) === 1)\n              }\n              setSpanningTreeEdges(a: HEdge[]) {\n                  for (let b of a) b.contains(this) && this.spanningTreeAdjacentNodes.push(b.getOtherNode(this));\n              }\n              getNextNodeMovingLeft(a: HNode): HNode {\n                let b = a.getDirectionTo(this);\n                let directions: { x: number; y: number; }[] = [];\n                for (var c of this.spanningTreeAdjacentNodes) directions.push(this.getDirectionTo(c));\n                for (let c = getLeftOf(b); !directions.some(dir => dir.x === c.x && dir.y === c.y);) c = getRightOf(c);\n                return this.spanningTreeAdjacentNodes[directions.findIndex(dir => dir.x === c.x && dir.y === c.y)];\n              }\n              getDirectionTo(a: HNode): { x: number; y: number; } {\n                return { x: a.x - this.x, y: a.y - this.y };\n              }\n              resetForAStar() {\n                  this.alreadyVisited = false;\n                  this.shortestDistanceToThisPoint = 0;\n              }\n          }\n           function getLeftOf(a: { x: number; y: number; }): { x: number; y: number; } {\n              return a.x === 0 && a.y === 1 ? { x: 1, y: 0 } :\n                  a.x === 0 && a.y === -1 ? { x: -1, y: 0 } :\n                      a.x === 1 ? { x: 0, y: -1 } : { x: 0, y: 1 }\n          }\n          function getRightOf(a: { x: number; y: number; }): { x: number; y: number; } {\n              return a.x === 0 && a.y === 1 ? { x: -1, y: 0 } :\n                  a.x === 0 && a.y === -1 ? { x: 1, y: 0 } :\n                      a.x === 1 ? { x: 0, y: 1 } : { x: 0, y: -1 }\n          }\n          class HEdge {\n              node1: HNode;\n              node2: HNode;\n              constructor(a: HNode, b: HNode) {\n                  this.node1 = a;\n                  this.node2 = b;\n              }\n              isEqualTo(a: HEdge): boolean {\n                  return this.node1 === a.node1 && this.node2 === a.node2 || this.node1 === a.node2 && this.node2 === a.node1;\n              }\n              contains(a: HNode): boolean {\n                  return a === this.node1 || a === this.node2;\n              }\n              getOtherNode(a: HNode): HNode {\n                  return a === this.node1 ? this.node2 : this.node1;\n              }\n              connectNodes() {\n                  this.node1.spanningTreeAdjacentNodes.push(this.node2);\n                  this.node2.spanningTreeAdjacentNodes.push(this.node1);\n              }\n          }\n          class HPath {\n              pathLength: number;\n              nodesInPath: HNode[];\n              finishNode: HNode;\n              distanceToApple: number;\n              pathCounter: number;\n              constructor(a: HNode, b: HNode, p:p5) {\n                  this.pathLength = 0;\n                  this.nodesInPath = [a];\n                  this.finishNode = b;\n                  this.distanceToApple = 0;\n                  this.setDistanceToApple(p);\n                  this.pathCounter = 0;\n                \n              }\n              setDistanceToApple(p: p5) {\n                  this.distanceToApple = p.dist(this.finishNode.x, this.finishNode.y, this.getLastNode().x, this.getLastNode().y);\n              }\n              addToTail(a: HNode) {\n                  this.nodesInPath.push(a);\n                  this.pathLength += 1;\n                  this.setDistanceToApple(p);\n              }\n              getLastNode(): HNode {\n                  return this.nodesInPath[this.nodesInPath.length - 1];\n              }\n              getSnakeTailPositionAfterFollowingPath(a: Snake): HNode {\n                  const tailBlocksAsHNodes = a.tailBlocks.map(block => new HNode(block.x, block.y));\n                  return this.pathLength - a.addCount < tailBlocksAsHNodes.length ?\n                      tailBlocksAsHNodes[Math.max(0, this.pathLength - a.addCount)]\n                      :\n                      this.nodesInPath[this.pathLength - a.addCount - tailBlocksAsHNodes.length];\n              }\n              getNextMove(): { x: number; y: number; } {\n                  let a = this.nodesInPath[this.pathCounter + 1].x - this.nodesInPath[this.pathCounter].x,\n                      b = this.nodesInPath[this.pathCounter + 1].y - this.nodesInPath[this.pathCounter].y;\n                  this.pathCounter++;\n                  return { x: a, y: b };\n              }\n              clone(): HPath {\n                  let a = new HPath(this.nodesInPath[0], this.finishNode,p);\n                  a.nodesInPath = [...this.nodesInPath];\n                  a.pathLength = this.pathLength;\n                  a.distanceToApple = this.distanceToApple;\n                  return a;\n              }\n          }\n      };\n      new p5(sketch, canvasRef.current);\n    }\n    \n    }, []);\n    \n    return (\n        <div className=\"w-full aspect-[2.35/1] bg-[#202222] rounded-md border-[2px] border-[#3d3f40]\" id=\"snake-game-container\">\n            <div className=\"flex justify-center items-center h-full\" id=\"snake-game\" ref={canvasRef} style={{ width: '100%', height: '100%' }}></div>\n            \n        </div>\n        \n    );\n};\n\nexport default SnakeGame;"],"names":[],"mappings":"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"}},
    {"offset": {"line": 608, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}